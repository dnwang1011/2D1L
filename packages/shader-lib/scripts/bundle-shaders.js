const fs = require('fs-extra');
const glob = require('glob');
const path = require('path');

const srcDir = path.join(__dirname, '../src/shaders');
const outDir = path.join(__dirname, '../src/generated'); // Output to a subdirectory of src
const mainExportFile = path.join(__dirname, '../src/index.ts');

async function bundleShaders() {
  console.log('Starting shader bundling...');
  await fs.ensureDir(outDir);

  const shaderFiles = glob.sync(`${srcDir}/**/*.glsl`);
  let exportsContent = '// Auto-generated by bundle-shaders.js\n';

  for (const file of shaderFiles) {
    const shaderName = path.basename(file, '.glsl');
    const content = await fs.readFile(file, 'utf-8');
    
    // Basic parsing to split vertex and fragment shaders if in one file
    // This is a very naive approach; robust parsing would be more complex
    const vertexShaderMatch = content.match(/\/\/\s*Vertex Shader\s*([^\s\S]*?)(\s*\/\/\s*Fragment Shader|$)/i);
    const fragmentShaderMatch = content.match(/\/\/\s*Fragment Shader\s*([^\s\S]*)/i);

    let jsContent = '';
    let dtsContent = '';
    if (vertexShaderMatch && fragmentShaderMatch) {
      jsContent = `export const ${shaderName} = {\n  vertexShader: \`\n${vertexShaderMatch[1].trim()}\n\`,\n  fragmentShader: \`\n${fragmentShaderMatch[1].trim()}\n\`,\n};\nexport default ${shaderName};\n`;
      dtsContent = `export declare const ${shaderName}: {\n  vertexShader: string;\n  fragmentShader: string;\n};\nexport default ${shaderName};\n`;
    } else {
      // Assume entire file is one type or handle other formats
      jsContent = `const shaderContent = \`\n${content.trim()}\n\`;\nexport default shaderContent;\n`;
      dtsContent = `declare const shaderContent: string;\nexport default shaderContent;\n`;
    }

    const outFile = path.join(outDir, `${shaderName}.glsl.js`);
    const dtsFile = path.join(outDir, `${shaderName}.glsl.d.ts`);
    await fs.writeFile(outFile, jsContent);
    await fs.writeFile(dtsFile, dtsContent);
    console.log(`Bundled ${file} to ${outFile} and ${dtsFile}`);
    exportsContent += `export { default as ${shaderName} } from './generated/${shaderName}.glsl.js';\n`;
  }

  // Overwrite/create the main index.ts for shaders
  // This is a simple approach; a more robust one would append or manage existing exports
  await fs.writeFile(mainExportFile, exportsContent);
  console.log(`Updated main export file: ${mainExportFile}`);
  console.log('Shader bundling complete.');
}

bundleShaders().catch(err => {
  console.error('Error bundling shaders:', err);
  process.exit(1);
}); 